{"version":3,"sources":["Child.js","Loadding.js","App.js","serviceWorker.js","index.js"],"names":["Child","_ref","title","img","ingredients","react_default","a","createElement","className","map","item","i","key","text","src","alt","Loadding","parentContext","createContext","Recipes","catchContext","useContext","load","recipe","src_Loadding_0","label","src_Child_0","calories","image","App","_useState","useState","_useState2","Object","slicedToArray","setRecipe","_useState3","_useState4","search","setSearch","_useState5","_useState6","query","setQuery","_useState7","_useState8","setLoad","useEffect","getApiData","asyncToGenerator","regenerator_default","mark","_callee","res","data","wrap","_context","prev","next","fetch","concat","sent","json","hits","stop","apply","this","arguments","getRecom","e","target","innerText","passcontext","Provider","value","onSubmit","preventDefault","type","onChange","onClick","App_Recipes","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5cbb663b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Child.css\";\r\nconst Child = ({title,img,ingredients}) =>{\r\n  return(\r\n    <div className=\"recipe\"> \r\n      <h3>{title}</h3>\r\n      <ol>\r\n        {ingredients.map((item,i)=>\r\n          <li key={i}>{item.text}</li>\r\n        )}\r\n      </ol>\r\n      <img src={img} alt=\"\"/>\r\n    </div>\r\n  )\r\n}\r\nexport default Child;\r\n","import React from 'react';\r\nimport \"./Loadding.css\";\r\nconst Loadding = () =>{\r\n  return(\r\n    <div className=\"recipe-load\"> \r\n      <h3></h3>\r\n      <ol>\r\n        <li></li>\r\n        <li></li>\r\n        <li></li>\r\n        <li></li>\r\n        <li></li>\r\n        <li></li>\r\n        <li></li>\r\n      </ol>\r\n      <img alt=\"\"/>\r\n    </div>\r\n  )\r\n}\r\nexport default Loadding;","import React,{ useState , useEffect ,createContext ,useContext  } from 'react';\r\nimport \"./reset.css\";\r\nimport './App.css';\r\nimport Child from \"./Child\";\r\nimport Loadding from './Loadding';\r\n// 建立一個 Context Component\r\nconst parentContext = createContext();\r\nfunction App() {\r\n  const [recipe,setRecipe]=useState([]);\r\n  const [search,setSearch]=useState('');\r\n  const [query,setQuery]=useState('chicken');\r\n  const [load,setLoad]=useState(false);\r\n  useEffect(()=>{\r\n    setLoad(true);\r\n    getApiData();\r\n  },[query])\r\n\r\n  const getApiData = async() =>{\r\n    const APP_ID = 'f0c20d5f';\r\n    const APP_KEY = '0acbc34b99170b700ce1903b87b4b1db';\r\n    const res = await fetch(\r\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\r\n    )\r\n    const data = await res.json();\r\n    setRecipe(data.hits);\r\n    setLoad(false);\r\n  }\r\n  const updateSearch = e =>{\r\n    setSearch(e.target.value);\r\n  }\r\n  const getSearch = e =>{\r\n    e.preventDefault();\r\n    setQuery(search);\r\n    setSearch('');\r\n  }\r\n  const getRecom = e =>{\r\n    setQuery(e.target.innerText);\r\n  }\r\n  const passcontext = { load,recipe }\r\n  return (\r\n      // 將要傳遞的資料放進 Context Component.Provider 的 value 中 \r\n      <parentContext.Provider value={passcontext}>\r\n        <div className=\"App\">\r\n          <h1>Recipes Search</h1>\r\n          <form onSubmit={getSearch} className=\"search-form\">\r\n            <input \r\n              className=\"search-input\" \r\n              type=\"text\" \r\n              value={search} \r\n              onChange={updateSearch}\r\n            />\r\n            <button className=\"search-btn\" type=\"submit\">Search</button>\r\n          </form>\r\n          <ul className=\"recommend\">\r\n            <li>Recommend :</li>\r\n            <li onClick={getRecom}>Banana</li>\r\n            <li onClick={getRecom}>Apple</li>\r\n            <li onClick={getRecom}>Tea</li>\r\n            <li onClick={getRecom}>Pork</li>\r\n            <li onClick={getRecom}>Fish</li>\r\n          </ul>\r\n          <h2 className=\"recipes-title\">{query}</h2>\r\n          <Recipes/>\r\n        </div>\r\n      </parentContext.Provider>\r\n  );\r\n}\r\n\r\nconst Recipes = () =>{\r\n  // 將 Context Component 放進 useContext 中取得 value 的資料\r\n  const catchContext = useContext(parentContext);\r\n  const { load , recipe} = catchContext;\r\n  return(\r\n    <div className=\"recipes\">\r\n      {!load?recipe.map(item=>\r\n        <Child\r\n          key={item.recipe.label}\r\n          title={item.recipe.label}\r\n          text={item.recipe.calories}\r\n          img={item.recipe.image}\r\n          ingredients={item.recipe.ingredients}\r\n        />\r\n      )\r\n      :recipe.map(item=><Loadding key={item.recipe.label}/>)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}