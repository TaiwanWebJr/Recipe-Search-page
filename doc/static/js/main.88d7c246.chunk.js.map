{"version":3,"sources":["Child.js","Loadding.js","App.js","serviceWorker.js","index.js"],"names":["Child","_ref","title","img","ingredients","react_default","a","createElement","className","map","item","i","key","text","src","alt","Loadding","App","_useState","useState","_useState2","Object","slicedToArray","recipe","setRecipe","_useState3","_useState4","search","setSearch","_useState5","_useState6","query","setQuery","_useState7","_useState8","load","setLoad","useEffect","getApiData","asyncToGenerator","regenerator_default","mark","_callee","res","data","wrap","_context","prev","next","fetch","concat","sent","json","hits","stop","apply","this","arguments","getRecom","e","target","innerText","onSubmit","preventDefault","type","value","onChange","onClick","src_Loadding_0","label","src_Child_0","calories","image","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88d7c246.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Child.css\";\nconst Child = ({title,img,ingredients}) =>{\n  return(\n    <div className=\"recipe\"> \n      <h3>{title}</h3>\n      <ol>\n        {ingredients.map((item,i)=>\n          <li key={i}>{item.text}</li>\n        )}\n      </ol>\n      <img src={img} alt=\"\"/>\n    </div>\n  )\n}\nexport default Child;\n","import React from 'react';\nimport \"./Loadding.css\";\nconst Loadding = () =>{\n  return(\n    <div className=\"recipe-load\"> \n      <h3></h3>\n      <ol>\n        <li></li>\n        <li></li>\n        <li></li>\n        <li></li>\n        <li></li>\n        <li></li>\n        <li></li>\n      </ol>\n      <img alt=\"\"/>\n    </div>\n  )\n}\nexport default Loadding;","import React,{ useState , useEffect} from 'react';\nimport \"./reset.css\";\nimport './App.css';\nimport Child from \"./Child\";\nimport Loadding from './Loadding';\nfunction App() {\n  const [recipe,setRecipe]=useState([]);\n  const [search,setSearch]=useState('');\n  const [query,setQuery]=useState('chicken');\n  const [load,setLoad]=useState(false);\n\n  useEffect(()=>{\n    setLoad(true);\n    getApiData();\n  },[query])\n\n  const getApiData = async() =>{\n    const APP_ID = 'f0c20d5f';\n    const APP_KEY = '0acbc34b99170b700ce1903b87b4b1db';\n    const res = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n    )\n    const data = await res.json();\n    setRecipe(data.hits);\n    setLoad(false);\n    // console.log(data.hits)\n  }\n  const updateSearch = e =>{\n    setSearch(e.target.value);\n  }\n  const getSearch = e =>{\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n  const getRecom = e =>{\n    setQuery(e.target.innerText);\n  }\n  return (\n    <div className=\"App\">\n      <h1>Recipes Search</h1>\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input \n          className=\"search-input\" \n          type=\"text\" \n          value={search} \n          onChange={updateSearch}\n        />\n        <button className=\"search-btn\" type=\"submit\">Search</button>\n      </form>\n      <ul className=\"recommend\">\n        <li>推薦:</li>\n        <li onClick={getRecom}>Banana</li>\n        <li onClick={getRecom}>Pork</li>\n        <li onClick={getRecom}>Apple</li>\n        <li onClick={getRecom}>Tea</li>\n      </ul>\n      <div className=\"recipes\">\n        {!load?recipe.map(item=>\n          <Child\n            key={item.recipe.label}\n            title={item.recipe.label}\n            text={item.recipe.calories}\n            img={item.recipe.image}\n            ingredients={item.recipe.ingredients}\n          />\n        ):\n          recipe.map(item=>\n            <Loadding key={item.recipe.label}/>\n          )\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}